package {	import flash.display.MovieClip;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.events.Event;	public class Enemy extends MovieClip	{		public var realX:Number;		public var realY:Number;		public var lastX:Number;		public var lastY:Number;		public var startSpeed:Number;		public var airSpeed:Number;		public var angle:Number;		public var grabbed:Boolean = false;		public var airborn:Boolean = true;		public var runAway:Boolean = false;		public var walkingHeight:Number = Calculate.GROUND_LEVEL;		public static const DELAY_RESET:int = 200;		public static const PROJECTILE_SPEED:Number = 10;//20		public var range:Number = 0;		public var stoppingRange:Number = range;		public var walkingSpeed:Number = 1;		public var health:Number;		public var hand:Hand;		public var dragon:Dragon;		public var gameTimer:Timer;		public static var usingShield:Boolean;		public var projectile:Projectile;		public var usingShield:Boolean;		public var shieldTime:int;		public var enemyArray:Array;		public var lastEnemyDistance;		//for gold coins explosion		public var goldCoin:GoldCoin;		//public var goldCoins:Array = new Array;		//new argument: moveDirection		public function Enemy(gameTimer:Timer,hand:Hand,dragon:Dragon,posX:int,posY:int,hp:Number)		{			x = posX;			y = posY;			realX = posX;			realY = posY;			health = hp;			this.hand = hand;			this.dragon = dragon;			gameTimer.addEventListener(TimerEvent.TIMER,onTick);			this.gameTimer = gameTimer;		}		public function onTick(e:TimerEvent):void		{			//Determine new x and y			angle = Calculate.doAngle(realX,lastX,realY + Calculate.GRAV,lastY);			airSpeed = Calculate.doDistance(realX,lastX,realY + Calculate.GRAV,lastY);			lastX = realX;			lastY = realY;			var handX = hand.realX;			var handY = hand.realY;			var dragonX = dragon.realX;			var dragonY = dragon.realY;			doWalkingHeight();			whileShielding();			//while grabbed			if (grabbed)			{				whenGrabbed(handX,handY,dragonX,dragonY);			}			else			{				if ((realY < walkingHeight))				{					whenAirborn(handX,handY,dragonX,dragonY);				}				else				{					realY = walkingHeight;					whenOnGround(handX,handY,dragonX,dragonY);				}			}			x = realX;			y = realY;			if ((((realY > walkingHeight) && ! grabbed) && parent))			{				if ((airSpeed > 4))				{					health -=  airSpeed;				}			}		}		public function useShield():void		{			usingShield = true;		}		public function whileShielding():void		{			if (usingShield)			{				shieldTime++;				if ((shieldTime >= 90))				{					usingShield = false;					shieldTime = 0;				}			}		}		protected function doWalkingHeight()		{			walkingHeight = Calculate.GROUND_LEVEL - 375000 / Math.pow((realX - 400),2);			if ((walkingHeight < Calculate.GROUND_LEVEL - 30))			{				walkingHeight = Calculate.GROUND_LEVEL - 30;			}		}		protected function whenGrabbed(handX:Number,handY:Number,dragonX:Number,dragonY:Number)		{			realX = handX;			realY = handY;		}		protected function whenAirborn(handX:Number,handY:Number,dragonX:Number,dragonY:Number)		{			realX +=  airSpeed * Math.cos(angle);			realY +=  airSpeed * Math.sin(angle);		}		protected function whenOnGround(handX:Number,handY:Number,dragonX:Number,dragonY:Number)		{			var distToDrag = Calculate.doDistance(realX,dragonX,realY,dragonY);			//SHOOTING			if ((distToDrag <= range))			{				attack();			}			if (((realX - dragonX) < 0))			{				if (! runAway)				{					scaleX = -1;				}				if (runAway)				{					scaleX = 1;					realX -=  walkingSpeed;				}				else if ((distToDrag > stoppingRange))				{					realX +=  walkingSpeed;				}				runAway = false;			}			else			{				if (! runAway)				{					scaleX = 1;				}				if (runAway)				{					scaleX = -1;					realX +=  walkingSpeed;				}				else if ((distToDrag > stoppingRange))				{					realX -=  walkingSpeed;				}				runAway = false;			}		}		protected function attack()		{		}		public function explode(xCoord:int,yCoord:int,gold:int):void		{			for (var i:int = 0; i < gold; i++)			{				var e:CreateEvent = new CreateEvent(CreateEvent.CREATE_COIN,realX,realY,0,0);				dispatchEvent(e);			}		}		public function destroy()		{			gameTimer.removeEventListener(TimerEvent.TIMER,onTick);		}	}}