package {	import flash.utils.Timer;	import flash.display.Stage;	import flash.media.SoundChannel;	import flash.events.Event;	public class Charmer extends Enemy	{		public static const DELAY_RESET:int = 300;		public static const MAX_HEALTH:Number = 40;		public var delay:int = 0;		public var attackChannel:SoundChannel;		public function Charmer(gameTimer:Timer,hand:Hand,dragon:Dragon,posX:int,posY:int)		{			super(gameTimer,hand,dragon,posX,posY,MAX_HEALTH);			range = 500;			startSpeed = .5 + .4 * Math.random();			walkingSpeed = startSpeed;			stoppingRange = range * ((.2 * Math.random()) + .25);		}		protected override function whenOnGround(handX:Number,handY:Number,dragonX:Number,dragonY:Number)		{			var distToHand = Calculate.doDistance(realX,handX,realY,handY);			//SHOOTING			if ((distToHand <= range))			{				attack();			}			if (((realX - handX) < 0))			{				if (! runAway)				{					scaleX = -1;				}				if (runAway)				{					scaleX = 1;					realX -=  walkingSpeed;				}				else if ((distToHand > stoppingRange))				{					realX +=  walkingSpeed;				}				runAway = false;			}			else			{				if (! runAway)				{					scaleX = 1;				}				if (runAway)				{					scaleX = -1;					realX +=  walkingSpeed;				}				else if ((distToHand > stoppingRange))				{					realX -=  walkingSpeed;				}				runAway = false;			}		}		protected override function attack()		{			if (((delay == 0) && ! grabbed))			{				delay = DELAY_RESET;				var angle:Number = Calculate.doAngle(hand.x,this.x,hand.y,this.y);				var e:CreateEvent = new CreateEvent(CreateEvent.CREATE_ELECTROBALL,realX,realY,angle,12);				dispatchEvent(e);				//attackChannel = something.play();			}			delay--;		}		public function doAnimation():void		{			if (((currentFrame >= totalFrames - 1) && ! usingShield))			{				gotoAndStop(1);			}			else if (((currentFrame < totalFrames - 1) && ! usingShield))			{				gotoAndStop((currentFrame + 1));			}			else			{				gotoAndStop(totalFrames);			}		}	}}