package {	import flash.utils.Timer;	import flash.display.Stage;	import flash.media.SoundChannel;	import flash.events.TimerEvent;	public class Priest extends Enemy	{		public static const DELAY_RESET:int = 600;		public static const PROJECTILE_SPEED:Number = 15;		public static const MAX_HEALTH:Number = 15;		public static const AURA_RADIUS = 200;		public static const ADD_AURA_SPEED = .75;		public var runAwaySpeed;		public var delay:int = 0;		public var lastDistance:Number;		public var currentDistance:Number;		public var raiseDead:RaiseDead = new RaiseDead();		public var spawnChannel:SoundChannel;		public function Priest(gameTimer:Timer,hand:Hand,dragon:Dragon, posX:int, posY:int)		{			super(gameTimer, hand, dragon, posX, posY,  MAX_HEALTH);			range = 200;			startSpeed = .7 + .4 * Math.random();			walkingSpeed = startSpeed;			runAwaySpeed = startSpeed + 1.5;			stoppingRange = range * (.12 * Math.random() + .88);			spawnChannel = raiseDead.play();		}		protected override function doWalkingHeight()		{			//using this section as onTick()			currentDistance = Calculate.doDistance(hand.realX,realX,hand.realY,realY);			if (currentDistance <= AURA_RADIUS)			{				hand.multiplier = Hand.AURA_MULTIPLIER;			}			else			{				if (lastDistance <= AURA_RADIUS)				{					hand.multiplier = hand.storedMultiplier;				}			}			lastDistance = currentDistance;			for each (var enemy:Enemy in enemyArray)			{				if (Object(enemy).constructor != Priest)				{					var enemyDistance:Number = Calculate.doDistance(enemy.realX,realX,enemy.realY,realY);					if (enemyDistance <= AURA_RADIUS)					{						enemy.walkingSpeed = enemy.startSpeed + ADD_AURA_SPEED;					}					else					{						if (enemy.lastEnemyDistance <= AURA_RADIUS)						{							enemy.walkingSpeed = enemy.startSpeed;						}					}					enemy.lastEnemyDistance = enemyDistance;				}			}			walkingHeight = Calculate.GROUND_LEVEL - 375000 / Math.pow((realX - 400),2);			if ((walkingHeight < Calculate.GROUND_LEVEL - 30))			{				walkingHeight = Calculate.GROUND_LEVEL - 30;			}		}		protected override function whenOnGround(handX:Number, handY:Number, dragonX:Number, dragonY:Number)		{			var distToHand = Calculate.doDistance(realX,handX,realY,handY);			if (distToHand <= range)			{				walkingSpeed = runAwaySpeed;				if (realX - handX < 0)				{					realX -=  walkingSpeed;					scaleX = 1;				}				else				{					realX +=  walkingSpeed;					scaleX = -1;				}			}			else			{				walkingSpeed = startSpeed;				if (realX - handX < 0)				{					realX +=  walkingSpeed;					scaleX = -1;				}				else				{					realX -=  walkingSpeed;					scaleX = 1;				}			}		}	}}