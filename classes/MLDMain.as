package {	import flash.display.MovieClip;	import flash.utils.Timer;	import flash.events.*	import fl.motion.MotionEvent;	import flash.ui.Mouse;	import flash.ui.Keyboard;	import flash.display.Stage;	import flash.display.Sprite;	import flash.media.SoundChannel;	public class MLDMain extends MovieClip	{		public var gameTimer:Timer;		public var stopWatch:Timer;		public var timeAlive:int;		public var numberOfEnemies:int = 0;		//MovieClips		public var hand:Hand;		public var dragon:Dragon;		public var farmer:Farmer;		public var armor:Armor;		public var enemies:Array = new Array;		public var fireballs:Array = new Array;		public var bigFireballs:Array = new Array;		public var projectiles:Array = new Array;		public var coinArray:Array = new Array;		public var breath:FireBreath;		public var pauseScreen:PauseScreen;		//Skill Bar Var's		public var skillRegenCount:int;		public var firebreathCost = 70;		public var healthBar:Sprite = new Sprite();		public var skillBar:Sprite = new Sprite();				//shop vars		public var regenCost:int=100		public var skillRegenCost:int=100		public var maxHealthCost:int=100		public var maxSkillCost:int=100		//Int's		public var lastX:int;		public var lastY:int;		public var currentX:int;		public var currentY:int;		public var delayCount:int;		private var delay:int = Enemy.DELAY_RESET;		public var gold:int=0;		public var totalGold:int;		public var shownGold:int;		public var addedGold:int = 15;		public var roarCount:int;		public var skillPurchaseCost:int = 200;		//Booleans		public var inDragon:Boolean = false;		public var gameIsPaused:Boolean = false;		public var dragonRoar:Boolean;		public var dragonBreathPurchased:Boolean = false;		public var dragonRoarPurchased:Boolean = false;		public var bigFireballPurchased:Boolean = false;				//Sound Stuff		public var dragonDeath = new DragonDeath();		public var deathChannel:SoundChannel;		public var slap1:Slap1 = new Slap1();		public var slap2:Slap2 = new Slap2();		public var slap3:Slap3 = new Slap3();		public var thrown1:Thrown1 = new Thrown1();		public var thrown2:Thrown2 = new Thrown2();		public var thrown3:Thrown3 = new Thrown3();		public var pickedUp1:PickedUp1 = new PickedUp1();		public var pickedUp2:PickedUp2 = new PickedUp2();		public var pickedUp3:PickedUp3 = new PickedUp3();		public var throwingChannel:SoundChannel;		public var eating1:Eating1 = new Eating1();		public var eating2:Eating2 = new Eating2();		public var eating3:Eating3 = new Eating3();		public var eatingChannel:SoundChannel;		public var splatter:Splatter = new Splatter();		public var deathSound:DeathSound = new DeathSound();		public var firestorm:Firestorm = new Firestorm();		public var chirp:Chirp = new Chirp();		public var spit:Spit = new Spit();		public var sizzle:Sizzle = new Sizzle();		public var soundEffectsChannel:SoundChannel;				public var throw1:Throw1 = new Throw1();		public var throw2:Throw2 = new Throw2();		public var whistle:Whistle = new Whistle();		public var electricity:Electricity = new Electricity();		public var catapultLaunch:CatapultLaunch = new CatapultLaunch();		public var projChannel:SoundChannel;		public var ouch:Ouch = new Ouch();		public var psychScreem:PsychScreem = new PsychScreem();		public var screem:Screem = new Screem();		public var thisIsTasty:ThisIsTasty = new ThisIsTasty();		public var addOdds:Number = .0000002;		public var farmerOdds:Number = .004;		public var archerOdds:Number = .001;		public var harmerOdds:Number = .001;		public var armorOdds:Number = .001;		public var charmerOdds:Number = .001;		public var catapultOdds:Number = .001;		public var priestOdds:Number = .001;		public var birdOdds:Number = 0;		public function MLDMain()		{			Mouse.hide();			gameTimer = new Timer(15);			stopWatch = new Timer(1000);			hand = new Hand(this.gameTimer,0,0);			hand.cacheAsBitmap = true;			dragon = new Dragon(gameTimer, hand, 395, 180);			dragon.cacheAsBitmap = true;			pauseScreen=new PauseScreen()			addChild(hand);			addChild(dragon);			pauseScreen.healthPrice.mouseEnabled=false			pauseScreen.healthRegenPrice.mouseEnabled=false			pauseScreen.skillPrice.mouseEnabled=false			pauseScreen.skillRegenPrice.mouseEnabled=false			addChild(healthBar);			healthBar.x = healthBorder.x + 1;			healthBar.y = healthBorder.y + 1;			setChildIndex(healthBar, 1);			addChild(skillBar);			skillBar.x = skillBorder.x + 1;			skillBar.y = skillBorder.y + 1;			setChildIndex(skillBar, 1);						gameTimer.start();			stopWatch.start();			addEventListener(Event.ADDED_TO_STAGE, onAddedToStage);		}				public function onAddedToStage(e:Event):void		{			gameTimer.addEventListener(TimerEvent.TIMER,onTick);			stopWatch.addEventListener(TimerEvent.TIMER,addSecond);			pauseScreen.upgradeHealthB.addEventListener(MouseEvent.CLICK, buyHealth, false, 0, true);			pauseScreen.upgradeRegenB.addEventListener(MouseEvent.CLICK, buyRegen, false, 0, true);			pauseScreen.upgradeSkillB.addEventListener(MouseEvent.CLICK, buySkill, false, 0, true);			pauseScreen.upgradeSkillRegenB.addEventListener(MouseEvent.CLICK, buySkillRegen, false, 0, true);			pauseScreen.bigFireballButton.addEventListener(MouseEvent.CLICK, buyBigFireball, false, 0, true);			pauseScreen.dragonBreathButton.addEventListener(MouseEvent.CLICK, buyDragonBreath, false, 0, true);			pauseScreen.dragonRoarButton.addEventListener(MouseEvent.CLICK, buyDragonRoar, false, 0, true);			stage.addEventListener(KeyboardEvent.KEY_DOWN,pressKey);			stage.addEventListener(KeyboardEvent.KEY_UP,releaseKey);			stage.addEventListener(MouseEvent.MOUSE_DOWN,mouseClick);			stage.addEventListener(MouseEvent.MOUSE_UP,mouseRelease);			stage.addEventListener(CreateEvent.CREATE_PITCHFORK, createPitchfork);			stage.addEventListener(CreateEvent.CREATE_AARROW, createArrow);			stage.addEventListener(CreateEvent.CREATE_BOMB, createBomb);			stage.addEventListener(CreateEvent.CREATE_ELECTROBALL, createElectroball);			stage.addEventListener(CreateEvent.CREATE_ROCK, createRock);			stage.addEventListener(CreateEvent.CREATE_COIN, createCoin);		}				public function addSecond(e:TimerEvent):void		{			timeAlive++;		}		public function onTick(e:TimerEvent):void		{			//Functions appear in this order after the onTick function(this function). 			spawnEnemies();			checkHitOnEnemy();			checkBigHitOnEnemy();			passEnemiesToPriest();			removeEnemies();			checkSlap();			removeCoins();			updateBars();			checkGameOver();						if(dragonRoar)			{				pushBackEnemies();			}						setChildIndex(hand,this.numChildren - 1);		}		//PROJECTILES		private function createPitchfork(e:CreateEvent)		{			if(parent)			{				var projectile:Projectile = new Pitchfork(gameTimer,hand,dragon,e.realX,e.realY,e.initAngle,e.initSpeed);				projectile.cacheAsBitmap = true;				if (Math.random() < .5)				{					projChannel = throw1.play();				}				else				{					projChannel = throw2.play();				}				addChild(projectile);				projectiles.push(projectile);			}		}		private function createArrow(e:CreateEvent)		{			if(parent)			{				var projectile:Projectile = new Arrow(gameTimer,hand,dragon,e.realX,e.realY,e.initAngle,e.initSpeed);				projectile.cacheAsBitmap = true;				projChannel = whistle.play();				addChild(projectile);				projectiles.push(projectile);			}		}		private function createBomb(e:CreateEvent)		{			if(parent)			{				var projectile:Projectile = new Bomb(gameTimer,hand,dragon,e.realX,e.realY,e.initAngle,e.initSpeed);				projectile.cacheAsBitmap = true;				if (Math.random() < .5)				{					projChannel = throw1.play();				}				else				{					projChannel = throw2.play();				}				addChild(projectile);				projectiles.push(projectile);			}		}		private function createElectroball(e:CreateEvent)		{			if(parent)			{				var projectile:Projectile = new Electroball(gameTimer,hand,dragon,e.realX,e.realY,e.initAngle,e.initSpeed);				projectile.cacheAsBitmap = true;				projChannel = electricity.play();				addChild(projectile);				projectiles.push(projectile);			}		}		private function createRock(e:CreateEvent)		{			if(parent)			{				for(var i:int = 0; i < 3; i++)				{					var realAngle = .3 * Math.random() + e.initAngle - .15;					var projectile:Projectile = new Rock(gameTimer,hand,dragon,e.realX,e.realY,realAngle,e.initSpeed);					projectile.cacheAsBitmap = true;					projChannel = catapultLaunch.play();					addChild(projectile);					projectiles.push(projectile);				}			}		}						//COINS		private function createCoin(e:CreateEvent)		{			if(parent)			{				var goldToAdd:GoldCoin = new GoldCoin(gameTimer,hand,e.realX,e.realY);				goldToAdd.cacheAsBitmap = true;				addChild(goldToAdd);				coinArray.push(goldToAdd);			}		}		private function removeCoins():void		{			for each (var goldCoin:GoldCoin in coinArray)			{				if(goldCoin.hitTestObject(hand))				{					if(goldCoin.parent)					{						gold++;						totalGold++;						goldCoin.gameTimer.removeEventListener(TimerEvent.TIMER,goldCoin.onTick);						removeChild(goldCoin);						goldCoin = null;					}				}			}		}				//SPAWNENEMIES		private function spawnEnemies():void		{						var newEnemy:Enemy;			var xLocation:int = -50;						if (Math.random() < .5)			{				xLocation = stage.stageWidth + 50;			}						birdOdds = .00020 - .00020 * dragon.dragonHealth/ dragon.maxHealth;			if(dragon.dragonHealth/ dragon.maxHealth < .16)			{				birdOdds = .00010;			}			if(dragon.dragonHealth/ dragon.maxHealth < .8)			{				birdOdds = .00100;			}			if(Math.random() < birdOdds)			{				newEnemy = new Bird(gameTimer,hand,dragon,-20,Bird.FLYING_HEIGHT);				newEnemy.cacheAsBitmap = true;				enemies.push(newEnemy);				addChild(newEnemy);			}						//Farmer			if(farmerOdds < .005)			{				farmerOdds += addOdds;			}			if(Math.random() < farmerOdds)			{				newEnemy = new Farmer(gameTimer,hand,dragon,xLocation,stage.stageHeight);				newEnemy.cacheAsBitmap = true;				enemies.push(newEnemy);				addChild(newEnemy);			}			//Archer			if(gameTimer.currentCount > 2000)			{				if(archerOdds < .0035)				{					archerOdds += addOdds;				}				if(Math.random() < archerOdds)				{					newEnemy = new Archer(gameTimer,hand,dragon,xLocation,stage.stageHeight);					newEnemy.cacheAsBitmap = true;					enemies.push(newEnemy);					addChild(newEnemy);				}			}			//Harmer			if(gameTimer.currentCount > 4000)			{				if(harmerOdds < .004)				{					harmerOdds += addOdds;				}				if(Math.random() < harmerOdds)				{					newEnemy = new Harmer(gameTimer,hand,dragon,xLocation,stage.stageHeight);					newEnemy.cacheAsBitmap = true;					enemies.push(newEnemy);					addChild(newEnemy);				}			}			//Armor			if(gameTimer.currentCount > 6000)			{				armorOdds += addOdds;				if(Math.random() < armorOdds)				{					newEnemy = new Armor(gameTimer,hand,dragon,xLocation,stage.stageHeight);					newEnemy.cacheAsBitmap = true;					enemies.push(newEnemy);					addChild(newEnemy);				}			}			//Charmer			if(gameTimer.currentCount > 8000)			{				charmerOdds += addOdds;				if(Math.random() < charmerOdds)				{					newEnemy = new Charmer(gameTimer,hand,dragon,xLocation,stage.stageHeight);					newEnemy.cacheAsBitmap = true;					enemies.push(newEnemy);					addChild(newEnemy);				}			}			//Catapult			if(gameTimer.currentCount > 10000)			{				catapultOdds += addOdds;				if(Math.random() < catapultOdds)				{					newEnemy = new Catapult(gameTimer,hand,dragon,xLocation,stage.stageHeight);					newEnemy.cacheAsBitmap = true;					enemies.push(newEnemy);					addChild(newEnemy);				}			}			//Priest			if(gameTimer.currentCount > 12000)			{				priestOdds += addOdds;				if(Math.random() < priestOdds)				{					newEnemy = new Priest(gameTimer,hand,dragon,xLocation,stage.stageHeight);					newEnemy.cacheAsBitmap = true;					enemies.push(newEnemy);					addChild(newEnemy);				}			}		}		//ENEMY HIT BY FIREBALL		private function checkHitOnEnemy():void		{			for each (var fireball:Fireball in fireballs)			{				for each (var enemy:Enemy in enemies)				{					var enemyClass:Class = Object(enemy).constructor;						if (fireball.hitTestObject(enemy))					{						if (fireball.parent)						{							fireball.gameTimer.removeEventListener(TimerEvent.TIMER,fireball.onTick);							removeChild(fireball);							fireball = null;							soundEffectsChannel = sizzle.play();						}						if (enemy.parent && enemyClass != Armor && enemyClass != Charmer) //Armors immune to fire						{							enemy.health -= 30;						}						else if (enemy.parent && enemyClass == Charmer)						{							enemy.useShield();						}						break;					}				}			}			for (var i:int = 0; i < fireballs.length; i++)			{				if (fireballs[i].parent != this)				{					fireballs.splice(i,1);				}			}		}				private function checkBigHitOnEnemy():void		{			for each (var bigFireball:BigFireball in bigFireballs)			{				for each (var enemy:Enemy in enemies)				{					var enemyClass:Class = Object(enemy).constructor;						if (bigFireball.hitTestObject(enemy))					{						soundEffectsChannel = sizzle.play();						if (enemy.parent && enemyClass != Armor) //Armors immune to fire						{							enemy.health -= 30;						}						break;					}				}			}			for (var i:int = 0; i < bigFireballs.length; i++)			{				if (bigFireballs[i].parent != this)				{					bigFireballs.splice(i,1);				}			}		}						private function passEnemiesToPriest()		{			for each (var enemy:Enemy in enemies)			{				var enemyClass:Class = Object(enemy).constructor;					if(enemyClass == Priest)				{					enemy.enemyArray = enemies;				}			}		}		//REMOVE ENEMIES		private function removeEnemies()		{			//EATING			for each (var enemy:Enemy in enemies)			{				var enemyClass:Class = Object(enemy).constructor;													var distToDrag:Number = Calculate.doDistance(enemy.realX,dragon.realX,enemy.realY,dragon.realY);				if (((distToDrag < Dragon.HEAD_RADIUS) && enemyClass != Catapult && enemyClass != Harmer && enemy.parent))				{					if(enemyClass == Bird)					{						soundEffectsChannel = thisIsTasty.play();						dragon.superchargeCount = 500;					}										enemy.destroy();					removeChild(enemy);					enemy = null;					//GOLD GIVEN FROM EATING(0-5)					var ingestedGold:int = Math.random() * 5;					gold += ingestedGold;					totalGold += ingestedGold;					dragon.dragonSkill += 15;					//throwingChannel.stop();					var randNum:Number = Math.random();					if(randNum <= 1 / 3)						eatingChannel = eating1.play();					else if (randNum > 1 / 3 && randNum <= 2 / 3)						eatingChannel = eating2.play();					else if(randNum > 2 / 3)						eatingChannel = eating3.play();					if(enemyClass == Charmer || enemyClass == Priest)					{						soundEffectsChannel = screem.play();					}					hand.multiplier = Hand.DEFAULT_MULTIPLIER;					hand.storedMultiplier = Hand.DEFAULT_MULTIPLIER;					break;				}				//REMOVE IF HEALTH LESS THAN 0				if (enemy.health <= 0)				{					//CHANGE IN GOLD DEPENDING ON ENEMY					if(enemyClass == Armor)					{						addedGold = 25 + Math.random() * 10;					}					if(enemyClass == Harmer)					{						addedGold = 15 + Math.random() * 10;					}					if(enemyClass == Farmer)					{						addedGold = 10 + Math.random() * 10;					}					if(enemyClass == Archer)					{						addedGold = 15 + Math.random() * 10;					}					if(enemy.airSpeed > 10)					{						soundEffectsChannel = splatter.play();					}					enemy.explode(enemy.x, enemy.y, addedGold);					enemy.destroy();					removeChild(enemy);					enemy = null;								break;				}				if(enemyClass == Bird)				{					if(enemy.realX > stage.stageWidth + 20)					{						enemy.destroy();						removeChild(enemy);						enemy = null;						break;					}				}				//BREATH HIT				if (breath != null)				{					if (breath.hitTestObject(enemy) && enemyClass != Armor)//Armors immune to fire					{						enemy.health -= 25;						soundEffectsChannel = deathSound.play();						break;					}				}			}			for (var i:int = enemies.length - 1; i >= 0; i--)			{				if (enemies[i].parent != this)				{					enemies.splice(i,1);				}			}		}		//FIREBREATH		private function checkSlap():void		{			var distToDrag:Number = Calculate.doDistance(hand.realX,dragon.realX,hand.realY,dragon.realY);			if ((((distToDrag < Dragon.HEAD_RADIUS) && ! inDragon) && hand.slapEnabled))			{				inDragon = true;				lastX = mouseX;				lastY = mouseY;			}			if ((((distToDrag > Dragon.HEAD_RADIUS) && inDragon) && hand.slapEnabled))			{				inDragon = false;				var slapSpeed:Number = Calculate.doDistance(currentX,lastX,currentY,lastY);				if ((slapSpeed > 20) && (dragon.dragonSkill > FireBreath.COST - 2) && (breath == null))				{					var angle:Number = Calculate.doAngle(hand.x,dragon.x,hand.y,dragon.y);					breath = new FireBreath(dragon.x,dragon.y,angle);					addChild(breath);					dragon.dragonSkill -= FireBreath.COST;					soundEffectsChannel = firestorm.play();					dragon.animationCount2 = 1;				}				var randNum:Number = Math.random();				if(randNum <= 1 / 3)					soundEffectsChannel = slap1.play();				else if (randNum > 1 / 3 && randNum <= 2 / 3)					soundEffectsChannel = slap2.play();				else if(randNum > 2 / 3)					soundEffectsChannel = slap3.play();			}			if ((breath != null))			{				angle = Calculate.doAngle(hand.x,dragon.x + Dragon.HEAD_X,hand.y,dragon.y);				breath.updateAngle(angle);				if (breath.countsLeft <= 0)				{					removeChild(breath);					breath = null;				}			}		}		public function updateBars():void		{			healthBar.graphics.clear();			healthBar.graphics.beginFill(0xFF0000);			healthBar.graphics.drawRect(0,0,dragon.shownHealth*2*100/dragon.maxHealth, 20);			healthBar.graphics.endFill();			skillBar.graphics.clear();			skillBar.graphics.beginFill(0x0000CC);			skillBar.graphics.drawRect(0,0,dragon.shownSkill*2*100/dragon.maxSkill,20);			healthBar.graphics.endFill();			if(shownGold < gold)			{				shownGold++;			}			if(shownGold>gold){				shownGold--;			}							goldDisplay.text = shownGold.toString();		}		public function checkGameOver():void		{			if (dragon.shownHealth <= 0 && enemies.length > 0)			{				deathChannel = dragonDeath.play();				destroy();				dispatchEvent(new AvatarEvent(AvatarEvent.DEAD));				gameTimer.stop();				gameTimer = null;			}		}				public function pushBackEnemies():void		{			if(dragon.dragonSkill/dragon.maxSkill >= .01)			{				dragon.animationCount2 = 1;				for each (var enemy:Enemy in enemies)				{					var enemyClass:Class = Object(enemy).constructor;										if(enemyClass != Harmer)					{						enemy.runAway = true;					}				}				dragon.dragonSkill -= .01 * dragon.maxSkill;				soundEffectsChannel = psychScreem.play();			}		}				//SHOPPING		public function buyHealth(e:Event):void{			if(gold>maxHealthCost){				gold-=maxHealthCost				dragon.maxHealth+=10				dragon.dragonHealth+=20				maxHealthCost*=11				maxHealthCost/=10				pauseScreen.healthPrice.text="Buy More Health "+maxHealthCost+" Gold"				pauseScreen.goldDisplay.text="Gold: "+gold			}		}		public function buySkill(e:Event):void{			if(gold>maxSkillCost){				gold-=maxSkillCost				dragon.maxSkill+=10				maxSkillCost*=11				maxSkillCost/=10				pauseScreen.skillPrice.text="Buy More Max Skill: "+maxSkillCost+" Gold"				pauseScreen.goldDisplay.text="Gold: "+gold			}		}		public function buyRegen(e:Event):void{			if(gold>regenCost){				gold-=regenCost				dragon.healthRegen+=1				regenCost*=11				regenCost/=10				pauseScreen.healthRegenPrice.text="Buy Health Regen: "+regenCost+" Gold"				pauseScreen.goldDisplay.text="Gold: "+gold			}		}		public function buySkillRegen(e:Event):void{			if(gold>skillRegenCost){				gold-=skillRegenCost				dragon.skillRegen+=1				skillRegenCost*=11				skillRegenCost/=10				pauseScreen.skillRegenPrice.text="Buy Skill Regen: "+skillRegenCost+" Gold"				pauseScreen.goldDisplay.text="Gold: "+gold			}		}		public function buyBigFireball(e:Event):void		{			if(gold>skillPurchaseCost)			{				gold -=skillPurchaseCost;								bigFireballPurchased = true;								pauseScreen.addBigFireballPurchased();				var bigFireballSkill:BigFireballSkill = new BigFireballSkill();				addChild(bigFireballSkill);				setChildIndex(bigFireballSkill,numChildren - 2);									bigFireballSkill.x = bigFireballLocked.x;				bigFireballSkill.y = bigFireballLocked.y - 5;								removeChild(bigFireballLocked);				bigFireballLocked = null;				stage.focus = pauseScreen;				pauseScreen.goldDisplay.text="Gold: "+gold;			}		}		public function buyDragonBreath(e:Event):void		{			if(gold>skillPurchaseCost)			{				gold -=skillPurchaseCost;								dragonBreathPurchased = true;								pauseScreen.addDragonBreathPurchased();				var dragonBreathSkill:DragonBreathSkill = new DragonBreathSkill();				addChild(dragonBreathSkill);				setChildIndex(dragonBreathSkill,numChildren - 2);											dragonBreathSkill.x = dragonBreathLocked.x;				dragonBreathSkill.y = dragonBreathLocked.y;								removeChild(dragonBreathLocked);				dragonBreathLocked = null;				stage.focus = pauseScreen;				pauseScreen.goldDisplay.text="Gold: "+gold;							}				}		public function buyDragonRoar(e:Event):void		{			if(gold>skillPurchaseCost)			{				gold -=skillPurchaseCost;								dragonRoarPurchased = true;								pauseScreen.addDragonRoarPurchased();				var dragonRoarSkill:DragonRoarSkill = new DragonRoarSkill();				addChild(dragonRoarSkill);				setChildIndex(dragonRoarSkill,numChildren - 2);											dragonRoarSkill.x = dragonRoarLocked.x;				dragonRoarSkill.y = dragonRoarLocked.y;								removeChild(dragonRoarLocked);				dragonRoarLocked = null;				stage.focus = pauseScreen;				pauseScreen.goldDisplay.text="Gold: "+gold;							}						}				public function destroy():void		{			gameTimer.removeEventListener(TimerEvent.TIMER,onTick);			stopWatch.removeEventListener(TimerEvent.TIMER,addSecond);			pauseScreen.upgradeHealthB.removeEventListener(MouseEvent.CLICK, buyHealth);			pauseScreen.upgradeRegenB.removeEventListener(MouseEvent.CLICK, buyRegen);			pauseScreen.upgradeSkillB.removeEventListener(MouseEvent.CLICK, buySkill);			pauseScreen.upgradeSkillRegenB.removeEventListener(MouseEvent.CLICK, buySkillRegen);			if(pauseScreen.bigFireballButton != null)			pauseScreen.bigFireballButton.removeEventListener(MouseEvent.CLICK, buyBigFireball);			if(pauseScreen.dragonBreathButton != null)			pauseScreen.dragonBreathButton.removeEventListener(MouseEvent.CLICK, buyDragonBreath);			if(pauseScreen.dragonRoarButton != null)			pauseScreen.dragonRoarButton.removeEventListener(MouseEvent.CLICK, buyDragonRoar);			stage.removeEventListener(KeyboardEvent.KEY_DOWN,pressKey);			stage.removeEventListener(KeyboardEvent.KEY_UP,releaseKey);			stage.removeEventListener(MouseEvent.MOUSE_DOWN,mouseClick);			stage.removeEventListener(MouseEvent.MOUSE_UP,mouseRelease);			stage.removeEventListener(CreateEvent.CREATE_PITCHFORK, createPitchfork);			stage.removeEventListener(CreateEvent.CREATE_AARROW, createArrow);			stage.removeEventListener(CreateEvent.CREATE_BOMB, createBomb);			stage.removeEventListener(CreateEvent.CREATE_ELECTROBALL, createElectroball);			stage.removeEventListener(CreateEvent.CREATE_ROCK, createRock);			stage.removeEventListener(CreateEvent.CREATE_COIN, createCoin);		}				//====================EVENTS!!!!=====================		private function pressKey(e:KeyboardEvent):void		{			//D			if (e.keyCode == 68&&gameIsPaused==false)			{				if(dragonBreathPurchased)				{					hand.slapEnabled = true;				}			}			//F			if (e.keyCode == 70&&gameIsPaused==false)			{				if ((dragon.dragonSkill > Fireball.COST - 2))				{					var angle:Number = Calculate.doAngle(hand.x,dragon.x,hand.y,dragon.y);					var fireball:Fireball = new Fireball(gameTimer,dragon.x + Dragon.HEAD_X,dragon.y,angle,25);					addChild(fireball);					fireballs.push(fireball);					//dispatchEvent(new FireballEvent(FireballEvent.FIREBALL_ADDED));															dragon.dragonSkill -=  Fireball.COST;					dragon.animationCount1 = 1;					soundEffectsChannel = spit.play();				}			}			//G			if (e.keyCode == 71&&gameIsPaused==false)			{				if(bigFireballPurchased)				{					if ((dragon.dragonSkill > BigFireball.COST - 2))					{						var bigAngle:Number = Calculate.doAngle(hand.x,dragon.x,hand.y,dragon.y);						var bigFireball:BigFireball = new BigFireball(gameTimer,dragon.x + Dragon.HEAD_X,dragon.y,bigAngle,15);						addChild(bigFireball);						bigFireballs.push(bigFireball);															dragon.dragonSkill -=  BigFireball.COST;						dragon.animationCount1 = 1;						soundEffectsChannel = spit.play();					}				}			}					//S			if (e.keyCode == 83&&gameIsPaused==false)			{				if(dragonRoarPurchased)				{					if(dragon.dragonSkill > 1)					{						dragonRoar = true;					}				}			}			//A			if (e.keyCode == 65 && gameIsPaused==false)			{							}			//H			if (e.keyCode == 72 && gameIsPaused==false)			{							}						//Space			if (e.keyCode == Keyboard.SPACE)			{				if(gameIsPaused)				{					gameIsPaused=false;					gameTimer.start()					Mouse.hide();					removeChild(pauseScreen);   					stage.focus=this;				}else				{					gameIsPaused=true;					gameTimer.stop();					Mouse.show();					addChild(pauseScreen);					pauseScreen.goldDisplay.text="Gold: "+gold;					pauseScreen.healthRegenPrice.text="Buy Health Regen: "+regenCost;					pauseScreen.healthPrice.text="Buy More Health "+maxHealthCost;					pauseScreen.skillRegenPrice.text="Buy Skill Regen: "+skillRegenCost;					pauseScreen.skillPrice.text="Buy More Max Skill: "+maxSkillCost;				}			}		}		private function releaseKey(e:KeyboardEvent):void		{			if (e.keyCode == 68 && gameIsPaused==false)			{				hand.slapEnabled = false;			}			if (e.keyCode == 70)			{				if(hand.holding)				{					if(gameTimer.currentCount % 3 == 0)					{											}				}			}			//S			if (e.keyCode == 83 && gameIsPaused==false)			{				dragonRoar = false;			}		}		private function mouseClick(e:MouseEvent):void		{						for each (var enemy:Enemy in enemies)			{				var enemyClass:Class = Object(enemy).constructor;									if (enemy.hitTestObject(hand))				{					hand.multiplier = Hand.SMALL_ENEMY_MULTIPLIER;					hand.storedMultiplier = Hand.SMALL_ENEMY_MULTIPLIER;										if(enemyClass == Harmer)					{						hand.stunDuration = 20;						projChannel = ouch.play();						//do stun animation					}else if(enemyClass == Armor)					{						hand.multiplier = Hand.HEAVY_ENEMY_MULTIPLIER;						hand.storedMultiplier = Hand.HEAVY_ENEMY_MULTIPLIER;					}else if(enemyClass == Catapult)					{						hand.multiplier = Hand.CATAPULT_MULTIPLIER;						hand.storedMultiplier = Hand.CATAPULT_MULTIPLIER;					}					if(enemyClass != Harmer)					{						hand.holding = true;						enemy.grabbed = true;						var randNum:Number = Math.random();						if(randNum <= 1 / 3)							soundEffectsChannel = pickedUp1.play();						else if (randNum > 1 / 3 && randNum <= 2 / 3)							soundEffectsChannel = pickedUp2.play();						else if(randNum > 2 / 3)							soundEffectsChannel = pickedUp3.play();						break;					}				}			}		}		private function mouseRelease(e:MouseEvent):void		{			for each (var enemy:Enemy in enemies)			{				var enemyClass:Class = Object(enemy).constructor;													if (enemy.hitTestObject(hand))				{					hand.holding = false;					enemy.grabbed = false;										if(enemy.airSpeed > 20)					{						var randNum:Number = Math.random();						if(randNum <= 1 / 3)							throwingChannel = thrown1.play();						else if (randNum > 1 / 3 && randNum <= 2 / 3)							throwingChannel = thrown2.play();						else if(randNum > 2 / 3)							throwingChannel = thrown3.play();					}					hand.multiplier = Hand.DEFAULT_MULTIPLIER;					hand.storedMultiplier = Hand.DEFAULT_MULTIPLIER;				}			}		}	}}