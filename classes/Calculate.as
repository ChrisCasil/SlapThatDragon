package {	public class Calculate	{		public static const GRAV:Number = .8;		public static const GROUND_LEVEL = 365;		public function Calculate()		{			// constructor code		}		public static function doAngle(headX:Number, tailX:Number, headY:Number, tailY:Number):Number		{			var changeInX:Number = headX - tailX;			var changeInY:Number = headY - tailY;			var angle:Number;			if (changeInX == 0)			{				if (changeInY > 0)				{					angle = Math.PI / 2;				}				else				{					angle = 3 * Math.PI / 2;				}			}			else			{				angle = Math.atan(changeInY / changeInX);				if (changeInX < 0)				{					angle +=  Math.PI;				}				if (angle < 0)				{					angle +=  2 * Math.PI;				}			}			return angle;		}		public static function doAngle2(diffX:Number, diffY:Number):Number		{			var angle:Number;			if (diffX == 0)			{				if (diffY > 0)				{					angle = Math.PI / 2;				}				else				{					angle = 3 * Math.PI / 2;				}			}			else			{				angle = Math.atan(diffY / diffX);				if (diffX < 0)				{					angle +=  Math.PI;				}				if (angle < 0)				{					angle +=  2 * Math.PI;				}			}			return angle;		}		public static function doDistance(headX:Number, tailX:Number, headY:Number, tailY:Number):Number		{			var changeInX:Number = headX - tailX;			var changeInY:Number = headY - tailY;			return Math.sqrt(Math.pow(changeInX,2) + Math.pow(changeInY,2));		}		public static function doDistance2(diffX:Number, diffY:Number):Number		{			return Math.sqrt(Math.pow(diffX,2) + Math.pow(diffY,2));		}		/**		    * Determines the angle necessary to hit the specified point (in radians)		    * 		    * @param xIn The 'x' value from which the projectile is shot		    * @param xFin The 'x' value of the target		    * @param yIn The 'y' value from which the projectile is shot		    * @param yFin The 'y' value of the target		    * @param v The initial velocity of the projectile		    * @param g The gravity of the environment		* @param high True if the projectile should take high path, false if it should take low path		    * @return The angle at which the projectile should be shot in order to hit the target		    */		public static function findLaunchAngle(xIn:Number, xFin:Number, yIn:Number, yFin:Number, v:Number,		         g:Number, high:Boolean):Number		{			var x:Number = xIn - xFin;			var y:Number = yIn - yFin;			var b:Number = 2 * v * v / (g * x);			var c:Number = -2 * y * v * v / (g * x * x) + 1;			var angle:Number;			var sign:int = 1;			if (high)			{				sign = -1;			}			if (x < 0)			{				angle = Math.atan((-b - sign * Math.sqrt(b * b - 4 * c)) / 2);			}			else			{				angle = Math.atan((-b + sign * Math.sqrt(b * b - 4 * c)) / 2);				angle +=  Math.PI;			}			if (angle < 0)			{				angle +=  2 * Math.PI;			}			if (x == 0)			{				if (y * g > 0)					angle = Math.PI / 2;				angle = 3 * Math.PI / 2;			}						if (high)				angle = -angle;			return angle;		}	}}